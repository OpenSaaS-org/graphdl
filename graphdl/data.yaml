‚àµ GraphDL: A concrete implementation of GraphDL can function as a Database with Resources as instances of Nouns

import: https://yaml.do/raw.githubusercontent.com/graphdl/graphdl/main/graphdl/graph.yaml

üúâ Graph:
  _tenant:        [Tenant.graph]
  _project:       string = slugify(_name)
  _database:      string = slugify(_name)
  _domain:        string = https://${_project}.${env.BASE_DOMAIN}
  _requests:      [Request->graph]

‚ñ† Noun:
  _resources:     [Resource->noun]
  _requests:      [Request->noun]

‚ñ° Resource:
  _type:          Noun.resources
  _description:   A Resource is a specific instance of a Noun
  data:           json
  subjectOf:      [Action.subject]
  objectOf:       [Action.object]
  requests:       [Request.resource]
  created:        Request.create
  createdAt:      created->timestamp
  createdBy:      created->user
  updated:        Request.update
  updatedAt:      updated->timestamp
  updatedBy:      updated->user
  deleted:        Request.delete
  deletedAt:      deleted->timestamp
  deletedBy:      deleted->user
  tenant:         created->tenant

‚ñº Role:
  _seed:        anonymous | public | tenant | user | admin | owner
  resources:    [Resource] 
  users:        [User->roles]
  requests:     [Request->role]

‚ñΩ User:
  name:         string
  email:        email
  image:        url
  roles:        [Role.users]
  tenants:      [Tenant.users]
  ownerOf:      [Tenant.owners]
  adminOf:      [Tenant.admins]
  requests:     [Request->user]

‚ñ≥ Tenant:
  users:        [User->tenants]
  owners:       [User->ownerOf]
  admins:       [User->adminOf]
  requests:     [Request->tenant]

‚ü¢ Request:
  graph:        Graph.requests
  noun:         Noun.requests
  resource:     Resource.requests
  user:         User.requests
  role:         Role.requests
  tenant:       Tenant.requests
  timestamp:    timestamp = new Date()
  type:         list | search | get | create | update | delete
  body:         json
  query:        json
  headers:      json
  url:          url
  colo:         string
  ip:           string
  isp:          string
  city:         string
  region:       string
  country:      string
  continent:    string
  latitude:     latitude
  longitude:    longitude
  response:     Response.request

‚ü£ Response:
  request:      Request.response
  success:      boolean
  status:       200 | 201 | 204 | 400 | 401 | 403 | 404 | 409 | 500
  data:         json
  html:         html
  error:        json
  
