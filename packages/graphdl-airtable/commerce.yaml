Consumers:
  Name: >-
    string = formula(IF({ConsumerID} = '', {First Name} & ' ' & {Last Name},
    {ConsumerID}))
  Status: string
  First Name: string
  Middle Name: string
  Last Name: string
  Suffix: string
  Date Of Birth: string
  Education level: string
  Deals: [Deals->Buyer]
  Vehicles: [Vehicles->Customer]
  Addresses: [Addresses->Consumers]
  Address: string
  Address line 2: string
  City: string
  County: string
  State: string
  Zip: string
  Email: string
  Phone type: string
  Phone: string
  Drivers License: string
  Drivers License State: string
  Drivers License Number: string
  Drivers license exp: string
  Drivers License Expiration: string
  Insurance Policies: [Insurance Policies->Consumer]
  Pre-Approvals: [Pre-Approvals->Consumer]
  Get Pre-Approved: string
  Provide Proof of Insurance: string
  Login to Bank: string
  Connect Car: string
  Provide Proof of Income: string
  ConsumerID: string
  Tenant: [Tenants->Consumer]
  Buyer: [Buyers->Consumer]
  Credit Application ID: string
  Deals 2: [Deals->Co Buyer]
  Social Security: string
  Drivers licence state: string
  Income: integer
  Income interval: string
  Employment Status Code: string
  Employment duration: integer
  Employer Name: string
  Employer Phone: string
  Employment title: string
  Previous employer name: string
  Previous employer phone: string
  Previous employment title: string
  Previous employment duration: integer
  Previous employment income: integer
  Time at residence: integer
  Previous address line 1: string
  Previous address line 2: string
  Previous address city: string
  Previous address state: string
  Previous Zip: string
  Previous address duration: integer
  Residence type: string
  Rent / mortgage: integer
  Other Income Description: string
  Other Income Amount: integer
  Created: string
  Created By: string
  Last Touched: string
  Last Modified By: string
  Lead Source: >-
    Car Concierge (Andrew) | Driv.ly Website | Self Generated | Referral |
    Rocket
  Pre-Approvals Enchilada: [Pre-Approvals Enchilada->Consumer]
Buyers:
  Name: string = formula(IF({Company Buyer}='',{Consumer},{Company Buyer}))
  Consumer: [Consumers->Buyer]
  Email (from Consumer): lookup(Consumer->Consumers.Email)
  First Name (from Consumer): lookup(Consumer->Consumers.First Name)
  Last Name (from Consumer): lookup(Consumer->Consumers.Last Name)
  Phone: >-
    string = formula(IF({Phone (from Consumer)}='',{Phone (from Company
    Buyer)},{Phone (from Consumer)}))
  Email: >-
    string = formula(IF({Email (from Consumer)}='',{Email (from Company
    Buyer)},{Email (from Consumer)}))
  Phone (from Consumer): lookup(Consumer->Consumers.Phone)
  Company Buyer: [Companies->Buyer]
  Email (from Company Buyer): lookup(Company Buyer->Companies.Email)
  Phone (from Company Buyer): lookup(Company Buyer->Companies.Phone)
  ConsumerID (from Consumer): lookup(Consumer->Consumers.ConsumerID)
  BuyerID: string
  Address (from Consumer): lookup(Consumer->Consumers.Addresses)
  Address (from Company Buyer): lookup(Company Buyer->Companies.Address)
  Address: [Addresses->Buyer]
  Street (from Address): lookup(Address->Addresses.Street)
  Suite (from Address): lookup(Address->Addresses.Suite)
  City (from Address): lookup(Address->Addresses.City)
  State (from Address): lookup(Address->Addresses.State)
  Zip (from Address): lookup(Address->Addresses.Zip)
  Country (from Address): lookup(Address->Addresses.Country)
  Deals: [Deals->Company/Consumer Buyer]
  Created: string
Deals:
  Name: >-
    string = formula({BuyerID (from Company/Consumer Buyer)} & ' - ' & {YMM} & '
    by ' & {Facilitator})
  Buyer: [Consumers->Deals]
  Vehicle: [Vehicles->Deals]
  YMM: lookup(Vehicle->Vehicles.YMM)
  Deal ID: string
  Buyer Relationship: string
  Co Buyer: [Consumers->Deals 2]
  Company/Consumer Buyer: [Buyers->Deals]
  Zip (from Buyer): lookup(Company/Consumer Buyer->Buyers.Zip (from Address))
  BuyerID (from Company/Consumer Buyer): lookup(Company/Consumer Buyer->Buyers.BuyerID)
  Lien Holder: [Companies->Deals 3]
  Dealer: [Companies->Dealer Deals]
  Facilitator: [Companies->Deals Facilitated]
  Type: >-
    Wholesale Dropship | Wholesale | Concierge Search | Consignment | Instant
    Cash Offer | Concierge Buy | Private Party
  Sales Price: string
  Margin: string
  Down Payment: string
  Financed Amount: string
  Taxes & Fees: [Taxes & Fees->Deals]
  DMV Fees (from Taxes & Fees): lookup(Taxes & Fees->Taxes & Fees.DMV Fees)
  Dependencies: [Deals->unknownfield]
  Unsigned Documents: string
  Signed Documents: string
  Delivery Address: [Addresses->Deals]
  Payment Link: string
  Get Trade Offer: string
  Notarize Power of Attorney: string
  Generate Buyers Guide: >-
    string = formula(IF({State (from Dealer)},
    'https://documents.driv.ly/api/generate/' & RIGHT(RECORD_ID(),
    LEN(RECORD_ID())- 3) & '/' & {State (from Dealer)} & '/buyers-guide',
    BLANK()))
  Generate Buyers Order: >-
    string = formula(IF({State (from Dealer)},
    'https://documents.driv.ly/api/generate/' & RIGHT(RECORD_ID(),
    LEN(RECORD_ID())- 3) & '/' & {State (from Dealer)} & '/buyers-order',
    BLANK()))
  Generate Power Of Attorney: >-
    string = formula(IF({State (from Dealer)},
    'https://documents.driv.ly/api/generate/' & RIGHT(RECORD_ID(),
    LEN(RECORD_ID())- 3) & '/' & {State (from Dealer)} & '/power-of-attorney',
    BLANK()))
  Generate Application To Title (MN): >-
    string = formula(IF({State (from Dealer)},
    'https://documents.driv.ly/api/generate/' & RIGHT(RECORD_ID(),
    LEN(RECORD_ID())- 3) & '/' & {State (from Dealer)} & '/vehicle-title',
    BLANK()))
  Generate Payoff Trade: >-
    string = formula(IF({State (from Dealer)},
    'https://documents.driv.ly/api/generate/' & RIGHT(RECORD_ID(),
    LEN(RECORD_ID())- 3) & '/' & {State (from Dealer)} & '/payoff-trade',
    BLANK()))
  Deal Summary: >-
    string = formula('https://deal.driv.ly/' & RIGHT(RECORD_ID(),
    LEN(RECORD_ID())- 3))
  Generate Credit Application: >-
    string = formula('https://credit.api.driv.ly/applications/' &
    RIGHT(RECORD_ID(), LEN(RECORD_ID())- 3))
  Service Quotes: [Service Quotes->Deal]
  Tenant: [Tenants->Deals]
  State (from Dealer): lookup(Dealer->Companies.State (from Address))
  Trades: [Trades->Deal]
  Credit Applications: [Credit Applications->Deal]
  Latest Error: string
  VSC Provider: [Companies->Deals]
  VSC: string
  GAP Provider: [Companies->Deals 2]
  GAP: string
  Status: string
  Transport (Service Orders): '[Service Orders->Deals]'
  Milage: integer
  Created By: string
  Last Modified By: string
  Created: string
  Development: boolean
  Last Modified: string
Vehicles:
  Name: string
  Customer: [Consumers->Vehicles]
  Status: >-
    Bought at Auction | Inspected | Transport to Inspection | Transport to
    Customer | Arbitration | Bid Placed | SOLD TO CUSTOMER | Identified as
    potential option for customer | Taken in on Trade | Trade sold at Auction |
    Trade sold Retail
  Deals: [Deals->Vehicle]
  YMM: string = formula({Year} & ' ' & {Make} & ' ' & {Model})
  Year: string
  Make: string
  Model: string
  Trim: string
  Style: string
  Body: string
  Drivetrain: string
  Engine: string
  Transmission: string
  Interior: string
  Exterior: string
  Listings: [Listings->Vehicles]
  Seller (from Listings): lookup(Listings->Listings.Seller)
  Wholesale Value (from Listings): lookup(Listings->Listings.Wholesale Value)
  Wholesale Buy Now Price (from Listings): lookup(Listings->Listings.Wholesale Buy Now Price)
  Wholesale Minimum Bid (from Listings): lookup(Listings->Listings.Wholesale Minimum Bid)
  Wholesale Current Bid (from Listings): lookup(Listings->Listings.Wholesale Current Bid)
  Wholesale Detail Page (from Listings): lookup(Listings->Listings.Wholesale Detail Page)
  Condition (from Listings): lookup(Listings->Listings.Condition)
  Wholesale Condition Report (from Listings): lookup(Listings->Listings.Wholesale Condition Report)
  Retail Value (from Listings): lookup(Listings->Listings.Retail Value)
  Retail Asking Price (from Listings): lookup(Listings->Listings.Retail Asking Price)
  Retail Buy Now Price (from Listings): lookup(Listings->Listings.Retail Buy Now Price)
  Odometer (from Listings): lookup(Listings->Listings.Odometer)
  Vehicle History Report (from Listings): lookup(Listings->Listings.Vehicle History Report)
  Vehicle History Score (from Listings): lookup(Listings->Listings.Vehicle History Score)
  Clean Title (from Listings): lookup(Listings->Listings.Clean Title)
  Owners (from Listings): lookup(Listings->Listings.Owners)
  Accidents (from Listings): lookup(Listings->Listings.Accidents)
  Attachments (from Listings): lookup(Listings->Listings.Attachments)
  Pickup Location (from Listings): lookup(Listings->Listings.Pickup Location)
  Pickup Location Zip: lookup(Listings->Listings.Zip (from Pickup Location))
  Service Quotes: [Service Quotes->Vehicle]
  Tenant: [Tenants->Vehicles]
  Tenants: lookup(Deals->Deals.Tenant)
  Trades: [Trades->Vehicle]
  last: string
  created: string
  Transport (Service Orders): string
  Transport (Service Orders) 2: [Service Orders->VIN]
Listings:
  Name: string = formula({Vehicles})
  Vehicles: [Vehicles->Listings]
  Year (from Vehicles): lookup(Vehicles->Vehicles.Year)
  Make (from Vehicles): lookup(Vehicles->Vehicles.Make)
  Model (from Vehicles): lookup(Vehicles->Vehicles.Model)
  Trim (from Vehicles): lookup(Vehicles->Vehicles.Trim)
  Style (from Vehicles): lookup(Vehicles->Vehicles.Style)
  Body (from Vehicles): lookup(Vehicles->Vehicles.Body)
  Drivetrain (from Vehicles): lookup(Vehicles->Vehicles.Drivetrain)
  Engine (from Vehicles): lookup(Vehicles->Vehicles.Engine)
  Transmission (from Vehicles): lookup(Vehicles->Vehicles.Transmission)
  Interior (from Vehicles): lookup(Vehicles->Vehicles.Interior)
  Exterior (from Vehicles): lookup(Vehicles->Vehicles.Exterior)
  Milage: integer
  Seller: string
  Wholesale Value: string
  Wholesale Buy Now Price: string
  Wholesale Minimum Bid: string
  Wholesale Current Bid: string
  Wholesale Detail Page: string
  Condition: integer
  Wholesale Condition Report: string
  Retail Value: string
  Retail Asking Price: string
  Retail Buy Now Price: string
  Odometer: integer
  Vehicle History Report: string
  Vehicle History Score: string
  Clean Title: boolean
  Owners: integer
  Accidents: integer
  Attachments: string
  Pickup Location: [Locations->Listings]
  Zip (from Pickup Location): lookup(Pickup Location->Locations.Zip)
  Created: string
  Last Modified: string
  Tenant: [Tenants->Listings]
Taxes & Fees:
  Name: string = formula({Combined Sales Tax})
  Sales Price: string
  Zip (from Buyer) (from Deals): lookup(Deals->Deals.Zip (from Buyer))
  Total Taxes & Fees: string
  Gross Sales Tax: string = formula({Shipping Tax}+{Combined Sales Tax})
  Combined Sales Tax: string
  Shipping Tax: string = formula({Shipping Cost} * .065)
  Shipping Cost: string
  State Sales Tax: string
  Gas Guzzler Tax: string
  Title Fee: string
  Registration Fee: string
  DMV Fee: string
  DMV Fees: [DMV Fees->Taxes & Fees]
  Doc Fee: string
  Combined Fees: string
  Deals: [Deals->Taxes & Fees]
  Tenant: [Tenants->Taxes & Fees]
  Environment: lookup(Tenant->Tenants.Environment)
  Created By: string
  Created: string
DMV Fees:
  Name: 'string = formula({Fee} & '': $'' & IF({Actual} = '''', {Estimate}, {Actual}))'
  Fee: string
  Estimate: string
  Actual: string
  Taxes & Fees: [Taxes & Fees->DMV Fees]
  Tenant: [Tenants->DMV Fees]
  Environment: lookup(Tenant->Tenants.Environment)
  Last Modified By: string
  Created: string
Fees:
  Fee Amount: string = formula('$' & {Dollar Amount})
  Description: string
  ID: integer
  Vehicle Price Min: string
  Vehicle Price Max: string
  Dollar Amount: string
Locations:
  Name: string
  Address: string
  City: string
  State: string
  Zip: string
  Country: string
  Listings: [Listings->Pickup Location]
  Tenant: [Tenants->Locations]
  Created: string
  Created By: string
Companies:
  Name: string
  Dealer Deals: [Deals->Dealer]
  Deals Facilitated: [Deals->Facilitator]
  Insurance Policies: [Insurance Policies->Insurance Company]
  Insurance Quotes: [Insurance Quotes->Company]
  Type: >-
    Dealer | Concierge | Broker | Partner | Auction | Affiliate | Insurer |
    Mobile Detailer | Last Mile Transporter | Service Provider | Lender
  Address: [Addresses->Company]
  State (from Address): lookup(Address->Addresses.State)
  Phone: string
  Email: string
  Website: string
  Stripe Connect Link: string
  Customer Portal Link: string
  Service Quotes: [Service Quotes->Service Provider]
  Service Orders: string
  Service Quotes Partners: [Service Quotes->Partner]
  Tenant: [Tenants->Companies]
  Visibility: string
  Tenants: [Tenants->Company]
  Tenants 2: [Tenants->Default Dealer]
  Buyer: [Buyers->Company Buyer]
  Trades: [Trades->Lienholder]
  Tenants 3: [Tenants->Default Facilitator]
  Deals: [Deals->VSC Provider]
  Deals 2: [Deals->GAP Provider]
  Partner Brand: [Brands->Companies]
  Deals 3: [Deals->Lien Holder]
  Route One Dealer: string
  Transport (Service Orders): '[Service Orders->Company]'
Addresses:
  Name: string
  Street: string
  Suite: string
  City: string
  State: string
  Zip: string
  Country: string
  Company: [Companies->Address]
  Phone (from Company): lookup(Company->Companies.Phone)
  Deals: [Deals->Delivery Address]
  Tenant: [Tenants->Addresses]
  Buyer: [Buyers->Address]
  First Name (from Consumer) (from Buyer): lookup(Buyer->Buyers.First Name (from Consumer))
  Last Name (from Consumer) (from Buyer): lookup(Buyer->Buyers.Last Name (from Consumer))
  Phone (from Buyer): lookup(Buyer->Buyers.Phone)
  Phone: >-
    string = formula(IF({Phone (from Buyer)}='',{Phone (from Company)},{Phone
    (from Buyer)}))
  Email (from Buyer): lookup(Buyer->Buyers.Email)
  Consumers: [Consumers->Addresses]
  Pre-Approvals: string
  Grid view: [Contacts->Addresses]
Pre-Approvals:
  Name: string = formula({First Name} & ' ' & {Last Name})
  Consumer: [Consumers->Pre-Approvals]
  First Name: string
  Last Name: string
  Phone: string
  Zip: string
  Email: string
  Middle Initial: string
  Suffix: string
  Address: string
  City: string
  State: string
  Income: string
  IP Address: string
  User Agent: string
  ISP: string
  Created: string
  Resend: string
Pre-Approvals Enchilada:
  ID: string = formula({Name} & ' ' & {Score})
  Consumer: [Consumers->Pre-Approvals Enchilada]
  AppId: string
  Name: string
  Score: string
  Status: string
  UserName: string
  CreateDate: string
  ProductId: integer
  QuickProductID: integer
  DealerName: string
  StatusId: integer
  IsQQPass: integer
  Email: string
  AppMobileNo: string
  IsQuickQualifyXpress: boolean
  IsFullFileReportAvilable: boolean
  IsLeadFormReport: boolean
  IsQR: boolean
  RemoveOperator: boolean
  IsQScan: boolean
  QuickScanStatus: string
  Created: string
Credit Applications:
  Application ID: string
  RouteOne Application ID: string
  RouteOne Deal Jacket ID: string
  CUDL Application ID: string
  Deal: [Deals->Credit Applications]
  Buyer (from Deal): lookup(Deal->Deals.Buyer)
  Tenant (from Deal): lookup(Deal->Deals.Tenant)
  Status: string
  Errors: string
  Link: string
  Created: string
  Updated: string
Insurance Policies:
  Name: string
  Consumer: [Consumers->Insurance Policies]
  Insurance Company: [Companies->Insurance Policies]
  Policy Number: string
  Tenant: [Tenants->Insurance Policies]
Insurance Quotes:
  Name: string
  Company: [Companies->Insurance Quotes]
  Tenant: [Tenants->Insurance Quotes]
  Environment: lookup(Tenant->Tenants.Environment)
Service Quotes:
  Name: string
  Type: >-
    Vehicle Service Contract | Pre-Paid Maintenance | Long Haul Transport | Last
    Mile Delivery | Pre-Purchase Inspection | Post Sale Inspection | Condition
    Inspection | Safety Inspection | Mechanical Inspection | Wash & Detail
  Status: string
  Service Provider: [Companies->Service Quotes]
  Quote ID: string
  Partner: [Companies->Service Quotes Partners]
  Service Orders: string
  Checkout Link: string
  Deal: [Deals->Service Quotes]
  Vehicles (from Deal): lookup(Deal->Deals.Vehicle)
  Vehicle: [Vehicles->Service Quotes]
  VIN: >-
    string = formula(IF({Vehicles (from Deal)} = '', {Vehicle},{Vehicles (from
    Deal)}))
  Rush: boolean
  Created: string
  ETA Min: string
  ETA Max: string
  Distance: integer
  Expires: string
  Cost: string
  Price: string
  Margin: string
  Partner Profit Share: string
  Partner Margin: string
  Tenant: [Tenants->Service Quotes]
  Environment: lookup(Tenant->Tenants.Environment)
  Transport (Service Orders): string
  Transport (Service Orders) 2: [Service Orders->Service Quotes]
Service Orders:
  Name: string
  Type: >-
    Condition Inspection | Last Mile Delivery | Long Haul Transport | Mechanical
    Inspection | Post Sale Inspection | Pre-Paid Maintenance  | Pre-Purchase
    Inspection | Safety Inspection | Vehicle Service Contract | Wash & Detail
  Company: [Companies->Transport (Service Orders)]
  Service Quotes: [Service Quotes->Transport (Service Orders) 2]
  Payment Link: string
  VIN: [Vehicles->Transport (Service Orders) 2]
  Status: string
  Error: string
  Order ID: string
  Price: string
  Rush: boolean
  Attachments: [Attachments->Transport (Service Orders)]
  Quote: lookup(Service Quotes->Service Quotes.Price)
  Quote ID: lookup(Service Quotes->Service Quotes.Quote ID)
  Expires (from Quote): lookup(Service Quotes->Service Quotes.Expires)
  Quote Expiration: string
  Created (from Quote): lookup(Service Quotes->Service Quotes.Created)
  Ordered: string
  Start: string
  Due: string
  Consignor: [Contacts->Transport (Service Orders) 4]
  Bill To: [Contacts->Transport (Service Orders) 3]
  Origin: [Contacts->Transport (Service Orders)]
  Destination: [Contacts->Transport (Service Orders) 2]
  Deals: [Deals->Transport (Service Orders)]
  Order Link: string
  Tenant: [Tenants->Transport (Service Orders)]
  Environment: lookup(Tenant->Tenants.Environment)
Contacts:
  Name: string
  Status: string
  Type: >-
    Auction | Mechanic | Operations | Back Office | Transporter | Detailer |
    Customer | Dealer
  Addresses: [Addresses->Grid view]
  Contact First Name: lookup(Addresses->Addresses.First Name (from Consumer) (from Buyer))
  Contact Last Name: lookup(Addresses->Addresses.Last Name (from Consumer) (from Buyer))
  Buyer (from Addresses): lookup(Addresses->Addresses.Buyer)
  Address: lookup(Addresses->Addresses.Street)
  City: lookup(Addresses->Addresses.City)
  State: lookup(Addresses->Addresses.State)
  Zip: lookup(Addresses->Addresses.Zip)
  Email: lookup(Addresses->Addresses.Email (from Buyer))
  Phone: lookup(Addresses->Addresses.Phone)
  Transport (Service Orders): '[Service Orders->Origin]'
  Transport (Service Orders) 2: [Service Orders->Destination]
  Transport (Service Orders) 3: [Service Orders->Bill To]
  Transport (Service Orders) 4: [Service Orders->Consignor]
Attachments:
  Name: string
  Status: string
  Type: string
  File: string
  Service Orders: string
  Order ID: string
  Transport (Service Orders): '[Service Orders->Attachments]'
Webhooks:
  URL: string
  Tenants: [Tenants->Webhooks]
  Method: string
Tenants:
  Name: string
  Company: [Companies->Tenants]
  Default Dealer: [Companies->Tenants 2]
  Default Facilitator: [Companies->Tenants 3]
  Email: string
  API Key: string
  Environment: string
  Credit Application Label: string
  Deals: [Deals->Tenant]
  Consumer: [Consumers->Tenant]
  Locations: [Locations->Tenant]
  Insurance Quotes: [Insurance Quotes->Tenant]
  Service Quotes: [Service Quotes->Tenant]
  Service Orders: string
  Insurance Policies: [Insurance Policies->Tenant]
  Addresses: [Addresses->Tenant]
  Companies: [Companies->Tenant]
  Listings: [Listings->Tenant]
  Vehicles: [Vehicles->Tenant]
  Webhooks: [Webhooks->Tenants]
  Taxes & Fees: [Taxes & Fees->Tenant]
  DMV Fees: [DMV Fees->Tenant]
  Tenants: [Tenants->unknownfield]
  Transport (Service Orders): '[Service Orders->Tenant]'
Trades:
  Name: string = formula({Vehicle})
  Status: string
  Deal: [Deals->Trades]
  Trade-In Allowance: string
  Net Trade Allowance: string = formula({Trade-In Allowance} - {Trade-In Payoff Balance})
  Odometer: integer
  Lienholder: [Companies->Trades]
  Address (from Lienholder): lookup(Lienholder->Companies.Address)
  Phone (from Lienholder): lookup(Lienholder->Companies.Phone)
  Trade-In Payoff Balance: string
  Payoff Good Through: string
  Vehicle: [Vehicles->Trades]
  Year: lookup(Vehicle->Vehicles.Year)
  Make: lookup(Vehicle->Vehicles.Make)
  Model: lookup(Vehicle->Vehicles.Model)
  Style: lookup(Vehicle->Vehicles.Style)
  Color: lookup(Vehicle->Vehicles.Exterior)
  Created: string
  Last Modified By: string
Brands:
  Company: string
  Logo SVG: string
  Logo PNG: string
  Primary Color: string
  Hover Color: string
  Secondary Color: string
  Legal Name: string
  Status: string
  Companies: [Companies->Partner Brand]
  Created By: string
Documents:
  Name: string
  Email: string
  Notes: string
  Attachments: string
  Created By: string
  Created: string

